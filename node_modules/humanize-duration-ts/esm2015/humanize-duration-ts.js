/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HumanizeDurationLanguage {
    constructor() {
        this.languages = {
            ar: {
                y: (c) => { return c === 1 ? 'سنة' : 'سنوات'; },
                mo: (c) => { return c === 1 ? 'شهر' : 'أشهر'; },
                w: (c) => { return c === 1 ? 'أسبوع' : 'أسابيع'; },
                d: (c) => { return c === 1 ? 'يوم' : 'أيام'; },
                h: (c) => { return c === 1 ? 'ساعة' : 'ساعات'; },
                m: (c) => { return c === 1 ? 'دقيقة' : 'دقائق'; },
                s: (c) => { return c === 1 ? 'ثانية' : 'ثواني'; },
                ms: (c) => { return c === 1 ? 'جزء من الثانية' : 'أجزاء من الثانية'; },
                decimal: ','
            },
            ca: {
                y: (c) => { return 'any' + (c !== 1 ? 's' : ''); },
                mo: (c) => { return 'mes' + (c !== 1 ? 'os' : ''); },
                w: (c) => { return 'setman' + (c !== 1 ? 'es' : 'a'); },
                d: (c) => { return 'di' + (c !== 1 ? 'es' : 'a'); },
                h: (c) => { return 'hor' + (c !== 1 ? 'es' : 'a'); },
                m: (c) => { return 'minut' + (c !== 1 ? 's' : ''); },
                s: (c) => { return 'segon' + (c !== 1 ? 's' : ''); },
                ms: (c) => { return 'milisegon' + (c !== 1 ? 's' : ''); },
                decimal: ','
            },
            cs: {
                y: (c) => { return ['rok', 'roku', 'roky', 'let'][this.getCzechForm(c)]; },
                mo: (c) => { return ['měsíc', 'měsíce', 'měsíce', 'měsíců'][this.getCzechForm(c)]; },
                w: (c) => { return ['týden', 'týdne', 'týdny', 'týdnů'][this.getCzechForm(c)]; },
                d: (c) => { return ['den', 'dne', 'dny', 'dní'][this.getCzechForm(c)]; },
                h: (c) => { return ['hodina', 'hodiny', 'hodiny', 'hodin'][this.getCzechForm(c)]; },
                m: (c) => { return ['minuta', 'minuty', 'minuty', 'minut'][this.getCzechForm(c)]; },
                s: (c) => { return ['sekunda', 'sekundy', 'sekundy', 'sekund'][this.getCzechForm(c)]; },
                ms: (c) => { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][this.getCzechForm(c)]; },
                decimal: ','
            },
            da: {
                y: 'år',
                mo: (c) => { return 'måned' + (c !== 1 ? 'er' : ''); },
                w: (c) => { return 'uge' + (c !== 1 ? 'r' : ''); },
                d: (c) => { return 'dag' + (c !== 1 ? 'e' : ''); },
                h: (c) => { return 'time' + (c !== 1 ? 'r' : ''); },
                m: (c) => { return 'minut' + (c !== 1 ? 'ter' : ''); },
                s: (c) => { return 'sekund' + (c !== 1 ? 'er' : ''); },
                ms: (c) => { return 'millisekund' + (c !== 1 ? 'er' : ''); },
                decimal: ','
            },
            de: {
                y: (c) => { return 'Jahr' + (c !== 1 ? 'e' : ''); },
                mo: (c) => { return 'Monat' + (c !== 1 ? 'e' : ''); },
                w: (c) => { return 'Woche' + (c !== 1 ? 'n' : ''); },
                d: (c) => { return 'Tag' + (c !== 1 ? 'e' : ''); },
                h: (c) => { return 'Stunde' + (c !== 1 ? 'n' : ''); },
                m: (c) => { return 'Minute' + (c !== 1 ? 'n' : ''); },
                s: (c) => { return 'Sekunde' + (c !== 1 ? 'n' : ''); },
                ms: (c) => { return 'Millisekunde' + (c !== 1 ? 'n' : ''); },
                decimal: ','
            },
            en: {
                y: (c) => { return 'year' + (c !== 1 ? 's' : ''); },
                mo: (c) => { return 'month' + (c !== 1 ? 's' : ''); },
                w: (c) => { return 'week' + (c !== 1 ? 's' : ''); },
                d: (c) => { return 'day' + (c !== 1 ? 's' : ''); },
                h: (c) => { return 'hour' + (c !== 1 ? 's' : ''); },
                m: (c) => { return 'minute' + (c !== 1 ? 's' : ''); },
                s: (c) => { return 'second' + (c !== 1 ? 's' : ''); },
                ms: (c) => { return 'millisecond' + (c !== 1 ? 's' : ''); },
                decimal: '.'
            },
            es: {
                y: (c) => { return 'año' + (c !== 1 ? 's' : ''); },
                mo: (c) => { return 'mes' + (c !== 1 ? 'es' : ''); },
                w: (c) => { return 'semana' + (c !== 1 ? 's' : ''); },
                d: (c) => { return 'día' + (c !== 1 ? 's' : ''); },
                h: (c) => { return 'hora' + (c !== 1 ? 's' : ''); },
                m: (c) => { return 'minuto' + (c !== 1 ? 's' : ''); },
                s: (c) => { return 'segundo' + (c !== 1 ? 's' : ''); },
                ms: (c) => { return 'milisegundo' + (c !== 1 ? 's' : ''); },
                decimal: ','
            },
            fi: {
                y: (c) => { return c === 1 ? 'vuosi' : 'vuotta'; },
                mo: (c) => { return c === 1 ? 'kuukausi' : 'kuukautta'; },
                w: (c) => { return 'viikko' + (c !== 1 ? 'a' : ''); },
                d: (c) => { return 'päivä' + (c !== 1 ? 'ä' : ''); },
                h: (c) => { return 'tunti' + (c !== 1 ? 'a' : ''); },
                m: (c) => { return 'minuutti' + (c !== 1 ? 'a' : ''); },
                s: (c) => { return 'sekunti' + (c !== 1 ? 'a' : ''); },
                ms: (c) => { return 'millisekunti' + (c !== 1 ? 'a' : ''); },
                decimal: ','
            },
            fr: {
                y: (c) => { return 'an' + (c !== 1 ? 's' : ''); },
                mo: 'mois',
                w: (c) => { return 'semaine' + (c !== 1 ? 's' : ''); },
                d: (c) => { return 'jour' + (c !== 1 ? 's' : ''); },
                h: (c) => { return 'heure' + (c !== 1 ? 's' : ''); },
                m: (c) => { return 'minute' + (c !== 1 ? 's' : ''); },
                s: (c) => { return 'seconde' + (c !== 1 ? 's' : ''); },
                ms: (c) => { return 'milliseconde' + (c !== 1 ? 's' : ''); },
                decimal: ','
            },
            gr: {
                y: (c) => { return c === 1 ? 'χρόνος' : 'χρόνια'; },
                mo: (c) => { return c === 1 ? 'μήνας' : 'μήνες'; },
                w: (c) => { return c === 1 ? 'εβδομάδα' : 'εβδομάδες'; },
                d: (c) => { return c === 1 ? 'μέρα' : 'μέρες'; },
                h: (c) => { return c === 1 ? 'ώρα' : 'ώρες'; },
                m: (c) => { return c === 1 ? 'λεπτό' : 'λεπτά'; },
                s: (c) => { return c === 1 ? 'δευτερόλεπτο' : 'δευτερόλεπτα'; },
                ms: (c) => { return c === 1 ? 'χιλιοστό του δευτερολέπτου' : 'χιλιοστά του δευτερολέπτου'; },
                decimal: ','
            },
            hu: {
                y: 'év',
                mo: 'hónap',
                w: 'hét',
                d: 'nap',
                h: 'óra',
                m: 'perc',
                s: 'másodperc',
                ms: 'ezredmásodperc',
                decimal: ','
            },
            id: {
                y: 'tahun',
                mo: 'bulan',
                w: 'minggu',
                d: 'hari',
                h: 'jam',
                m: 'menit',
                s: 'detik',
                ms: 'milidetik',
                decimal: '.'
            },
            it: {
                y: (c) => { return 'ann' + (c !== 1 ? 'i' : 'o'); },
                mo: (c) => { return 'mes' + (c !== 1 ? 'i' : 'e'); },
                w: (c) => { return 'settiman' + (c !== 1 ? 'e' : 'a'); },
                d: (c) => { return 'giorn' + (c !== 1 ? 'i' : 'o'); },
                h: (c) => { return 'or' + (c !== 1 ? 'e' : 'a'); },
                m: (c) => { return 'minut' + (c !== 1 ? 'i' : 'o'); },
                s: (c) => { return 'second' + (c !== 1 ? 'i' : 'o'); },
                ms: (c) => { return 'millisecond' + (c !== 1 ? 'i' : 'o'); },
                decimal: ','
            },
            ja: {
                y: '年',
                mo: '月',
                w: '週',
                d: '日',
                h: '時間',
                m: '分',
                s: '秒',
                ms: 'ミリ秒',
                decimal: '.'
            },
            ko: {
                y: '년',
                mo: '개월',
                w: '주일',
                d: '일',
                h: '시간',
                m: '분',
                s: '초',
                ms: '밀리 초',
                decimal: '.'
            },
            lt: {
                y: (c) => { return ((c % 10 === 0) || (c % 100 >= 10 && c % 100 <= 20)) ? 'metų' : 'metai'; },
                mo: (c) => { return ['mėnuo', 'mėnesiai', 'mėnesių'][this.getLithuanianForm(c)]; },
                w: (c) => { return ['savaitė', 'savaitės', 'savaičių'][this.getLithuanianForm(c)]; },
                d: (c) => { return ['diena', 'dienos', 'dienų'][this.getLithuanianForm(c)]; },
                h: (c) => { return ['valanda', 'valandos', 'valandų'][this.getLithuanianForm(c)]; },
                m: (c) => { return ['minutė', 'minutės', 'minučių'][this.getLithuanianForm(c)]; },
                s: (c) => { return ['sekundė', 'sekundės', 'sekundžių'][this.getLithuanianForm(c)]; },
                ms: (c) => { return ['milisekundė', 'milisekundės', 'milisekundžių'][this.getLithuanianForm(c)]; },
                decimal: ','
            },
            ms: {
                y: 'tahun',
                mo: 'bulan',
                w: 'minggu',
                d: 'hari',
                h: 'jam',
                m: 'minit',
                s: 'saat',
                ms: 'milisaat',
                decimal: '.'
            },
            nl: {
                y: 'jaar',
                mo: (c) => { return c === 1 ? 'maand' : 'maanden'; },
                w: (c) => { return c === 1 ? 'week' : 'weken'; },
                d: (c) => { return c === 1 ? 'dag' : 'dagen'; },
                h: 'uur',
                m: (c) => { return c === 1 ? 'minuut' : 'minuten'; },
                s: (c) => { return c === 1 ? 'seconde' : 'seconden'; },
                ms: (c) => { return c === 1 ? 'milliseconde' : 'milliseconden'; },
                decimal: ','
            },
            no: {
                y: 'år',
                mo: (c) => { return 'måned' + (c !== 1 ? 'er' : ''); },
                w: (c) => { return 'uke' + (c !== 1 ? 'r' : ''); },
                d: (c) => { return 'dag' + (c !== 1 ? 'er' : ''); },
                h: (c) => { return 'time' + (c !== 1 ? 'r' : ''); },
                m: (c) => { return 'minutt' + (c !== 1 ? 'er' : ''); },
                s: (c) => { return 'sekund' + (c !== 1 ? 'er' : ''); },
                ms: (c) => { return 'millisekund' + (c !== 1 ? 'er' : ''); },
                decimal: ','
            },
            pl: {
                y: (c) => { return ['rok', 'roku', 'lata', 'lat'][this.getPolishForm(c)]; },
                mo: (c) => { return ['miesiąc', 'miesiąca', 'miesiące', 'miesięcy'][this.getPolishForm(c)]; },
                w: (c) => { return ['tydzień', 'tygodnia', 'tygodnie', 'tygodni'][this.getPolishForm(c)]; },
                d: (c) => { return ['dzień', 'dnia', 'dni', 'dni'][this.getPolishForm(c)]; },
                h: (c) => { return ['godzina', 'godziny', 'godziny', 'godzin'][this.getPolishForm(c)]; },
                m: (c) => { return ['minuta', 'minuty', 'minuty', 'minut'][this.getPolishForm(c)]; },
                s: (c) => { return ['sekunda', 'sekundy', 'sekundy', 'sekund'][this.getPolishForm(c)]; },
                ms: (c) => { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][this.getPolishForm(c)]; },
                decimal: ','
            },
            pt: {
                y: (c) => { return 'ano' + (c !== 1 ? 's' : ''); },
                mo: (c) => { return c !== 1 ? 'meses' : 'mês'; },
                w: (c) => { return 'semana' + (c !== 1 ? 's' : ''); },
                d: (c) => { return 'dia' + (c !== 1 ? 's' : ''); },
                h: (c) => { return 'hora' + (c !== 1 ? 's' : ''); },
                m: (c) => { return 'minuto' + (c !== 1 ? 's' : ''); },
                s: (c) => { return 'segundo' + (c !== 1 ? 's' : ''); },
                ms: (c) => { return 'milissegundo' + (c !== 1 ? 's' : ''); },
                decimal: ','
            },
            ru: {
                y: (c) => { return ['лет', 'год', 'года'][this.getSlavicForm(c)]; },
                mo: (c) => { return ['месяцев', 'месяц', 'месяца'][this.getSlavicForm(c)]; },
                w: (c) => { return ['недель', 'неделя', 'недели'][this.getSlavicForm(c)]; },
                d: (c) => { return ['дней', 'день', 'дня'][this.getSlavicForm(c)]; },
                h: (c) => { return ['часов', 'час', 'часа'][this.getSlavicForm(c)]; },
                m: (c) => { return ['минут', 'минута', 'минуты'][this.getSlavicForm(c)]; },
                s: (c) => { return ['секунд', 'секунда', 'секунды'][this.getSlavicForm(c)]; },
                ms: (c) => { return ['миллисекунд', 'миллисекунда', 'миллисекунды'][this.getSlavicForm(c)]; },
                decimal: ','
            },
            uk: {
                y: (c) => { return ['років', 'рік', 'роки'][this.getSlavicForm(c)]; },
                mo: (c) => { return ['місяців', 'місяць', 'місяці'][this.getSlavicForm(c)]; },
                w: (c) => { return ['неділь', 'неділя', 'неділі'][this.getSlavicForm(c)]; },
                d: (c) => { return ['днів', 'день', 'дні'][this.getSlavicForm(c)]; },
                h: (c) => { return ['годин', 'година', 'години'][this.getSlavicForm(c)]; },
                m: (c) => { return ['хвилин', 'хвилина', 'хвилини'][this.getSlavicForm(c)]; },
                s: (c) => { return ['секунд', 'секунда', 'секунди'][this.getSlavicForm(c)]; },
                ms: (c) => { return ['мілісекунд', 'мілісекунда', 'мілісекунди'][this.getSlavicForm(c)]; },
                decimal: ','
            },
            sv: {
                y: 'år',
                mo: (c) => { return 'månad' + (c !== 1 ? 'er' : ''); },
                w: (c) => { return 'veck' + (c !== 1 ? 'or' : 'a'); },
                d: (c) => { return 'dag' + (c !== 1 ? 'ar' : ''); },
                h: (c) => { return 'timm' + (c !== 1 ? 'ar' : 'e'); },
                m: (c) => { return 'minut' + (c !== 1 ? 'er' : ''); },
                s: (c) => { return 'sekund' + (c !== 1 ? 'er' : ''); },
                ms: (c) => { return 'millisekund' + (c !== 1 ? 'er' : ''); },
                decimal: ','
            },
            tr: {
                y: 'yıl',
                mo: 'ay',
                w: 'hafta',
                d: 'gün',
                h: 'saat',
                m: 'dakika',
                s: 'saniye',
                ms: 'milisaniye',
                decimal: ','
            },
            vi: {
                y: 'năm',
                mo: 'tháng',
                w: 'tuần',
                d: 'ngày',
                h: 'giờ',
                m: 'phút',
                s: 'giây',
                ms: 'mili giây',
                decimal: ','
            },
            zh_CN: {
                y: '年',
                mo: '个月',
                w: '周',
                d: '天',
                h: '小时',
                m: '分钟',
                s: '秒',
                ms: '毫秒',
                decimal: '.'
            },
            zh_TW: {
                y: '年',
                mo: '個月',
                w: '周',
                d: '天',
                h: '小時',
                m: '分鐘',
                s: '秒',
                ms: '毫秒',
                decimal: '.'
            }
        };
    }
    /**
     * @param {?} key
     * @param {?} lang
     * @return {?}
     */
    addLanguage(key, lang) {
        this.languages[key] = lang;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    getCzechForm(c) {
        if (c === 1) {
            return 0;
        }
        else if (Math.floor(c) !== c) {
            return 1;
        }
        else if (c % 10 >= 2 && c % 10 <= 4 && c % 100 < 10) {
            return 2;
        }
        else {
            return 3;
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    getPolishForm(c) {
        if (c === 1) {
            return 0;
        }
        else if (Math.floor(c) !== c) {
            return 1;
        }
        else if (c % 10 >= 2 && c % 10 <= 4 && !(c % 100 > 10 && c % 100 < 20)) {
            return 2;
        }
        else {
            return 3;
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    getSlavicForm(c) {
        if (Math.floor(c) !== c) {
            return 2;
        }
        else if ((c >= 5 && c <= 20) || (c % 10 >= 5 && c % 10 <= 9) || c % 10 === 0) {
            return 0;
        }
        else if (c % 10 === 1) {
            return 1;
        }
        else if (c > 1) {
            return 2;
        }
        else {
            return 0;
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    getLithuanianForm(c) {
        if (c === 1 || (c % 10 === 1 && c % 100 > 20)) {
            return 0;
        }
        else if (Math.floor(c) !== c || (c % 10 >= 2 && c % 100 > 20) || (c % 10 >= 2 && c % 100 < 10)) {
            return 1;
        }
        else {
            return 2;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HumanizeDuration {
    /**
     * @param {?} languageUtil
     */
    constructor(languageUtil) {
        this.languageUtil = languageUtil;
        this.defaultOptions = {
            language: 'en',
            delimiter: ', ',
            spacer: ' ',
            conjunction: '',
            serialComma: true,
            units: ['y', 'mo', 'w', 'd', 'h', 'm', 's'],
            languages: {},
            largest: 10,
            decimal: '.',
            round: false,
            unitMeasures: {
                y: 31557600000,
                mo: 2629800000,
                w: 604800000,
                d: 86400000,
                h: 3600000,
                m: 60000,
                s: 1000,
                ms: 1
            }
        };
        this.options = this.defaultOptions;
    }
    /**
     * @param {?} value
     * @param {?=} tempOptions
     * @return {?}
     */
    humanize(value, tempOptions) {
        let /** @type {?} */ options = tempOptions !== undefined ? this.extend(this.options, tempOptions) : this.defaultOptions;
        return this.doHumanization(value, options);
    }
    /**
     * @param {?} passedOptions
     * @return {?}
     */
    setOptions(passedOptions) {
        this.options = passedOptions !== undefined ? this.extend(this.defaultOptions, passedOptions) : this.defaultOptions;
    }
    /**
     * @return {?}
     */
    getSupportedLanguages() {
        let /** @type {?} */ result = [];
        for (let /** @type {?} */ language in this.languageUtil.languages) {
            if (this.languageUtil.languages.hasOwnProperty(language)) {
                result.push(language);
            }
        }
        return result;
    }
    /**
     * @param {?} key
     * @param {?} lang
     * @return {?}
     */
    addLanguage(key, lang) {
        this.languageUtil.addLanguage(key, lang);
    }
    /**
     * @param {?} ms
     * @param {?} options
     * @return {?}
     */
    doHumanization(ms, options) {
        let /** @type {?} */ i, /** @type {?} */ len, /** @type {?} */ piece;
        // Make sure we have a positive number.
        // Has the nice sideffect of turning Number objects into primitives.
        ms = Math.abs(ms);
        let /** @type {?} */ dictionary = options.languages[options.language] || this.languageUtil.languages[options.language];
        if (!dictionary) {
            throw new Error('No language ' + dictionary + '.');
        }
        let /** @type {?} */ pieces = [];
        // Start at the top and keep removing units, bit by bit.
        let /** @type {?} */ unitName;
        let /** @type {?} */ unitMS, /** @type {?} */ unitCount;
        for (i = 0, len = options.units.length; i < len; i++) {
            unitName = options.units[i];
            unitMS = options.unitMeasures[unitName];
            // What's the number of full units we can fit?
            if (i + 1 === len) {
                unitCount = ms / unitMS;
            }
            else {
                unitCount = Math.floor(ms / unitMS);
            }
            // Add the string.
            pieces.push({
                unitCount: unitCount,
                unitName: unitName
            });
            // Remove what we just figured out.
            ms -= unitCount * unitMS;
        }
        let /** @type {?} */ firstOccupiedUnitIndex = 0;
        for (i = 0; i < pieces.length; i++) {
            if (pieces[i].unitCount) {
                firstOccupiedUnitIndex = i;
                break;
            }
        }
        if (options.round) {
            let /** @type {?} */ ratioToLargerUnit, /** @type {?} */ previousPiece;
            for (i = pieces.length - 1; i >= 0; i--) {
                piece = pieces[i];
                piece.unitCount = Math.round(piece.unitCount);
                if (i === 0) {
                    break;
                }
                previousPiece = pieces[i - 1];
                ratioToLargerUnit = options.unitMeasures[previousPiece.unitName] / options.unitMeasures[piece.unitName];
                if ((piece.unitCount % ratioToLargerUnit) === 0
                    || (options.largest && ((options.largest - 1) < (i - firstOccupiedUnitIndex)))) {
                    previousPiece.unitCount += piece.unitCount / ratioToLargerUnit;
                    piece.unitCount = 0;
                }
            }
        }
        let /** @type {?} */ result = [];
        for (i = 0, pieces.length; i < len; i++) {
            piece = pieces[i];
            if (piece.unitCount) {
                result.push(this.render(piece.unitCount, piece.unitName, dictionary, options));
            }
            if (result.length === options.largest) {
                break;
            }
        }
        if (result.length) {
            if (!options.conjunction || result.length === 1) {
                return result.join(options.delimiter);
            }
            else if (result.length === 2) {
                return result.join(options.conjunction);
            }
            else if (result.length > 2) {
                return result.slice(0, -1).join(options.delimiter) + (options.serialComma ? ',' : '')
                    + options.conjunction + result.slice(-1);
            }
        }
        else {
            return this.render(0, options.units[options.units.length - 1], dictionary, options);
        }
    }
    /**
     * @param {?} count
     * @param {?} type
     * @param {?} dictionary
     * @param {?} options
     * @return {?}
     */
    render(count, type, dictionary, options) {
        let /** @type {?} */ decimal;
        if (options.decimal === void 0) {
            decimal = dictionary.decimal;
        }
        else {
            decimal = options.decimal;
        }
        let /** @type {?} */ countStr = count.toString().replace('.', decimal.toString());
        let /** @type {?} */ dictionaryValue = dictionary[type];
        let /** @type {?} */ word;
        if (typeof dictionaryValue === 'function') {
            word = dictionaryValue(count);
        }
        else {
            word = dictionaryValue;
        }
        return countStr + options.spacer + word;
    }
    /**
     * @param {?} options
     * @param {?} override
     * @return {?}
     */
    extend(options, override) {
        for (let /** @type {?} */ prop in override) {
            if (options.hasOwnProperty(prop)) {
                options[prop] = override[prop];
            }
        }
        return options;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { HumanizeDurationLanguage, HumanizeDuration };
//# sourceMappingURL=humanize-duration-ts.js.map
